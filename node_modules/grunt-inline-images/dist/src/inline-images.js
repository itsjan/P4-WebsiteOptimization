/**
 * grunt-inline-images
 * https://github.com/EE/grunt-inline-images
 *
 * Author Michał Gołębiowski <michal.golebiowski@laboratorium.ee>
 * Licensed under the MIT license.
 */

'use strict';

var request = require('request');
var urlRegex = require('url-regex');
var detectJsonIndent = require('detect-json-indent');

module.exports = function (grunt) {
    var getRegexFromPattern = function (pattern) {return new RegExp('(?:http(?:s|):|)//(?:www\\.|)' + pattern);};

    var isUrl = function (string) {return typeof string === 'string' && urlRegex({ exact: true }).test(string);};

    var getEncodedImage = function (url) {return (
            new Promise(function (resolve, reject) {
                grunt.log.writeln('Downloading started...', url);
                request({ 
                    url: url, 
                    encoding: null, 
                    timeout: 10000 }, 
                function (error, response, body) {
                    if (error) {
                        grunt.log.error('Error when downloading ' + url + ': ' + error.message);
                        grunt.log.writeln('The URL will be kept intact');
                        grunt.log.writeln(error.stack);
                        return reject(error);}

                    grunt.log.writeln('File downloaded!', url);
                    resolve('data:' + (response.headers['content-type'] || 'image/jpeg') + ';base64,' + 
                    new Buffer(body).toString('base64'));});}));};



    // TODO switch to destructuring when Node 5 arrives.
    //    const transformObject = ({object, toInline, toDiscard, jobs}) => {
    var transformObject = function (params) {
        var object = params.object;
        var toInline = params.toInline;
        var toDiscard = params.toDiscard;
        var jobs = params.jobs;

        var transform = function (obj) {return transformObject({ 
                object: obj, 
                toInline: toInline, toDiscard: toDiscard, jobs: jobs });};


        var newObject = {};var _loop = function (
        key) {
            var value = object[key];
            if (typeof value === 'object' && value != null) {
                newObject[key] = transform(value);} else 
            if (isUrl(value)) {
                for (_iterator = toDiscard, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {if (_isArray) {if (_i >= _iterator.length) break;_ref = _iterator[_i++];} else {_i = _iterator.next();if (_i.done) break;_ref = _i.value;}var pattern = _ref;
                    if (getRegexFromPattern(pattern).test(value)) {
                        newObject[key] = 'about:blank';
                        break;}}


                for (_iterator2 = toInline, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {if (_isArray2) {if (_i2 >= _iterator2.length) break;_ref2 = _iterator2[_i2++];} else {_i2 = _iterator2.next();if (_i2.done) break;_ref2 = _i2.value;}var pattern = _ref2;
                    if (getRegexFromPattern(pattern).test(value)) {
                        jobs.push(
                        getEncodedImage(value).
                        then(function (encodedValue) {
                            newObject[key] = encodedValue;}));


                        // Don't download the same file twice.
                        break;}}} else 


            {
                newObject[key] = value;}};for (var key in object) {var _iterator, _isArray, _i;var _ref;var _iterator2, _isArray2, _i2;var _ref2;_loop(key);}


        return newObject;};


    grunt.registerMultiTask('inlineImages', 
    'Change all URLs matching a pattern to inline base64 representations.', 
    function () {
        var done = this.async();

        // TODO switch to destructuring when Node 5 arrives.
        //            const {toInline = [], toDiscard = []} = this.options();
        var options = this.options();
        var toInline = options.toInline || [];
        var toDiscard = options.toDiscard || [];

        var globalJobs = [];

        this.files.forEach(function (mapping) {
            mapping.src.forEach(function (path) {
                grunt.log.writeln(' ***** Processing file: ' + path + ' ***** ');

                var dest = undefined;
                var contents = grunt.file.read(path);
                var indent = detectJsonIndent(contents);
                var object = JSON.parse(contents);
                var jobs = [];

                if (mapping.dest) {
                    if (mapping.src.length !== 1) {
                        grunt.log.error('Only one source file per destination is supported!');
                        return false;}

                    dest = mapping.dest;} else 
                {
                    // If destination file not provided, write back to the source file.
                    dest = path;}


                var newObject = transformObject({ object: object, toInline: toInline, toDiscard: toDiscard, jobs: jobs });

                globalJobs.push(
                Promise.all(jobs).
                then(function () {
                    // Write transformed contents back into the file.
                    grunt.file.write(dest, JSON.stringify(newObject, null, indent));
                    grunt.log.writeln(' ***** File: ' + 
                    path + ' processed; output written to: ' + 
                    dest + ' ***** ');}));});});





        Promise.all(globalJobs).
        then(function () {
            done();}).

        catch(function () {
            done(false);});});};
//# sourceMappingURL=data:application/json;base64,
